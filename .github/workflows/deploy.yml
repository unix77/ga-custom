name: Deployment
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      # now I will use my custom action
      - name: Load & Cache dependencies
        id: cached-deps
        # I have to specify where is it located (path)
        # if I have the custom action in another repo, then I must specify the repo name
        # <yourGithubAccountName>/<yourRepoName>
        # you do not need to specify the .yml extention, this will be detected automatically
        # the path is about the root of the repo, and not from "here"
        uses: ./.github/actions/cached-deps
        # here we specify the input to the action
        with:
          # this will disable caching for this job (we do not need this)
          caching: false
      - name: Output information
        run: echo "Cache used ${{ steps.cached-deps.outputs.used-cache }}"
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      # now I will use my custom action
      - name: Load & Cache dependencies
        # I have to specify where is it located (path)
        # if I have the custom action in another repo, then I must specify the repo name
        # <yourGithubAccountName>/<yourRepoName>
        # you do not need to specify the .yml extention, this will be detected automatically
        # the path is about the root of the repo, and not from "here"
        uses: ./.github/actions/cached-deps
      - name: Lint code
        run: npm run lint
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      #
      # now I will use my custom action
      - name: Load & Cache dependencies
        # I have to specify where is it located (path)
        # if I have the custom action in another repo, then I must specify the repo name
        # <yourGithubAccountName>/<yourRepoName>
        # you do not need to specify the .yml extention, this will be detected automatically
        # the path is about the root of the repo, and not from "here"
        uses: ./.github/actions/cached-deps
      - name: Build website
        run: npm run build
        # here are the artifacts this step will produce, we will upload them to S3 !
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    # we need to add permissions here, in order to be able to use the AWS permissions
    permissions:
      # needed to interect with the token from the AWS account
      # so that the temporary token with the permissions can be created
      id-token: write
      # we need to add the next one in order to be able to read the contents of the S3 bucket
      contents: read
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: ./dist
      - name: Output contents
        run: ls
      # we use a new step to use openID connect get permissions from AWS
      # so that then we can use those permissions in the next steps
      - name: Get AWS permissions
        # we use this predefined action to get the permissions from AWS
        uses: aws-actions/configure-aws-credentials
        # we need some inputs to this action
        with:
          # here we paste the role created from AWS (the ARN of the role)
          role-to-assume: arn:aws:iam::290780714683:role/GithubDemo1
          aws-region: us-east-1
      # Next we will use the custom JS action we created to deploy the artifacts
      # or any other files we want to deploy to S3
      - name: Deploy site
        id: deploy
        # we point to the path of the custom action
        # uses: ./.github/actions/deploy-s3-javascript
        uses: ./.github/actions/deploy-s3-docker
        # we need to provide the access key and secret key of the aws bucket, in order t perform the file upload from out action -> to the bucket
        # since we need this creds only at this step level, we will add them here
        # we do not need this anymore, since we will use openID conenct set up from AWS
        # env:
        #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # since we need to provide inputs to the action, we will do it here
        with:
          # I need to provide my bucket name
          bucket: gha-security-histing-demo
          # here I must point to the location where the downloaded artifacts are (we uploaded them in the previous step)
          dist-folder: ./dist
          bucket-region: us-east-1
      # here we output the url of the deployed website, directly from the output of the action
      - name: Output information
        run: |
          echo "Website deployed at ${{ steps.deploy.outputs.website-url }}"
